Add "prefix_" to every non-blank line in "a.txt"
Add a number prefix followed by ')' to each line in "$string"
Append the contents of "file.txt" to the current in-memory history list
Append the current date to variable 'LBUFFER'
Append the date and command ran to "/tmp/trace" after every command
Archive "/path/to/copy" on host "remote.host" as user "user" to "/path/to/local/storage" updating files with different checksums, showing human readable progress and statistics, and compressing data during transmission
Archive "/path/to/copy" to "/path/to/local/storage" on host "host.remoted.from" as user "user" updating files with different checksums, showing human readable progress and statistics, and compressing data during transmission
Archive "_vim/" to "~/.vim" suppressing non-error messages and compressing data during transmission
Archive "_vimrc" to "~/.vimrc" suppressing non-error messages and compressing data during transmission
Archive "directory" preserving hard links from host "remote" to the current local directory and keep partial files, handle sparse files efficiently, and itemize changes made
Archive "source" to "root@remote_server_name:/opt/backups" via ssh on port 3382 and compress data during transmission
Archive "src" to "dest" via ssh with permissions set to 755
Archive "user@remoteip:/path/to/files/" to "/local/path" via ssh on port "$portNumber" and compressing data during transmission
Archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension
archive all files in a current directory modified in the last 30 days
Archive directory specified by variable "i" to "/iscsi" preserving relative paths.
as root, find from / all files called "file.txt"
Backup all of the Java files in the current directory tree by copying them and appending the suffix .bk to each
Calculate the md5 checksum of the current directory structure and save it in variable SUM
Calculate the md5 sum of "yourstring"
Calculate the md5 sum of all files in "/your/dir" including content and filenames and following symbolic links
Calculate the md5 sum of every ".py" file in directory tree "/path"
Calculate md5 sum of file $item and save it to variable 'md5'
Calculate the sum of all the numbers from 1 to 100000
Change directory to the directory containing the current script
change the extension of all the ".lst" files in the current folder to "a.lst"
Change file owner and group of "/path/to/yourapp" to root and print a diagnostic
Change file permissions on all regular files within a directory
change owner and group of the file "/path/to/yourapp" to root
Change the owner of "/var/www/html/mysite/images/" to "nobody"
Change the owner of all files in the directory tree "dir_to_start" excluding file "file_to_exclude" to "owner"
Change ownership of "/vol" to the current user
change the permissions of all the directories in the folder root_dir to 555
Change permissions to 644 for all regular files under and below /path/to/someDirectory/
change to a directory and search for a file in that directory
Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.
Changes to the directory where 'ssh' executable is located.
Check all .txt files whether they contain "needle"
Check if "$FILE_PATH" exists on "$HOST"
Check if the contents of file "subset" is a subset of file "set"
check the previous alias in current list
Compress "Hello world", base64 encode, and save to variable "FOO"
Compress all ".txt" files in all sub directories with gzip
Compress all files with '.txt' extension under current directory
Concatenate files containing `test' in their names
Connect to host "remotehost" as ssh user "user" to copy remote file "/location/KMST_DataFile_*.kms" to current directory on local host.
Continuously write "Hidden" over the entire "/dev/sdb" disk
Continuously write "UUUUUUUUUUUUUUUUU" without newlines to "/dev/to/overwrite"
Copy "/home/username/path/on/server/" to "username@your.ip.address.here:/Users/username/path/on/machine/" and convert encoding from UTF-8 to UTF-8-MAC
Copy a file xyz.c to all directories or over all files matching the letter 'c' at the end of their names under current directory tree
Copy a large sparse file "sparse-1" to "sparse-1-copy"
Copy all ".php" files in "projects/" directory tree to "copy/" preserving directory hierarchy
Copy all *.data files under /source_path to /target_path by appending the parent directory names in the source paths to the beginning of each of the target file names
Copy all files/directories excluding *.flac files under current directory to /media/wd/network_sync/music directory
Copy all files and directories under the current directory into "../new" preserving relative paths
Copy all files in current directory that do not match */exlude-path/* in their paths to /destination/ preserving directory structure
Copy all files with '.png' (case insensitive) extension under '/home/mine' directory tree to '/home/mine/pngcoppies/' directory with new names constructed by prepending 'copy' in their names
copy all java files from current folder to another folder
Copy all regular files whose names end in "~" from the /path directory tree to ~/backups/
Copies file 'file.dat' to each top-level directory in the current directory.
Copies file 'test' to each of directories like './fs*/*'.
Copy file in current directory of local host to host "remote", connecting as ssh user matching current local username, and copying the file in home directory on remote host - enable compression during transfer.
Copy file linked to by "bar.pdf" to "bar.pdf"
Copy files printed by "any_command_what_produces_relative_path_names" to "/new/parent/dir" preserving the directory hierarchy
Copy the owner and group from "file.txt" to "$tempfile"
Count the *.html files residing in the /usr/src directory tree and containing string "foo"
count amount of jobs running
Count files in the current path by modification month
Counts lines in each *.php file sorted by file path.
Counts lines of 'file' file.
Counts lines of /dir/file.txt file.
count lines of C or C++ or Obj-C code under the current directory
count the lines of java code for all the java files in the current directory
Count the number of differing lines in "file1" and "file2"
Count the number of files/directories named file1 under current directory
Counts the number of lines in each *.java file in a git repository.
Counts the number of lines in each *.swift or *.mm file in a git repository, escaping any space in filename.
Count the number of open files for PID "$PYTHONPID" every 2 seconds
Create a full path symbolic link "$newlink" from a relative path symbolic link "$origlink"
Create a ssh tunnel on local port 2222 through "bridge.example.com" to "remote.example.com" port 22 without executing any commands and run in the background
Create a symbolic link in the current directory to "$file"
create a symbolic link named "$ORACLE_HOME/include" to file "/usr/include/oracle/11.2/client"
Create a symbolc link named "public_html" to "current/app/webroot" under the current working directory
Create a symbolic link named "~/bin/subl" to "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl"
Create a symbolic link to file "/usr/bin/perl" named with escaped characters "/usr/local/bin/perl\r\n"
create a zip file of all the files in some directory
create archive "backup.tar.gz" from /path/to/catalog
Create empty file (or update timestamp to current date/time if file already exists) named with full timestamp (year/month/day/hour/minute/second).
Create empty files (or update timestamps if they exist) with names matching each word in variable "correctFilePathAndName"
Create hard links of all files and directories matching "test/icecream/cupcake/*" or "test/mtndew/livewire/*" in "test-keep" preserving directory hierarchy
Create symbolic links in the current directory for all files excluding "CONFIGFILE" located in "/your/project"
Create symbolic links in the current directory for all files excluding "CONFIGFILE" located under "/your/project" directory tree
create symbolic links in current directory to all files located in "dir" directory and have filename extension "jpg"
Creates temporary file with name formatted like '.script.XXXXXX' in '/tmp/' folder and saves path to it in 'script2' variable.
Creates temporary folder relative to directory '/path/to/dir'.
Delete all '-' character from $1 and save the resultant string to variable 'COLUMN'
Delete all broken symbolic links under '/usr/ports/packages' directory tree
Delete all directories under '.cache/chromium/Default/Cache/' directory tree that are bigger than 100MB and are at least 1 level deep
delete all the empty in the current folder do not search in sub directories
delete all the files in the file system which belong to the user edwarda after user confirmation
delete all the hidden in the folder Musica after user confirmation
Delete all in the current directory tree
Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree
Delete all regular files under $DIR directory tree that have been modified before file $a
Delete files under $LOCATION that match $REQUIRED_FILES in their names and were modified more than 360 minutes ago
Disables shell option 'nullglob'.
Display 12345 backwards
dispaly a list of all the files in the file system which belong to a specific user  and exclude searching in the folder proc
Display a list of files with sizes in decreasing order of size of all the regular files under $dir directory tree that are bigger than $size in size
dispaly a long listig of all the files in the home folder which are bigger than 100KB and discard any errors
display a long list of all the files that are bigger than 10KB in current folder
display a long listing of all the regular/normal files in the file system which have set uid bit or set gid bit enabled.
display a long listing of all the temp files whose size is 0 bytes and which have not been accessed in the last 10 days
display all the ".c" files in the current directory
display all the directories in the folder /path/to/dest except tmp directory
display all executable files in the folder /home
display all the files having the word "searched phrasse" in their name in the current folder excluding those from the paths "/tmp/" and "./var/log"
display all the files in the kat folder
display all the files  in the current folder excluding the perl files
display all the files in the current folder excluding search in the paths containing the folder having the word "mmm"
display all the files in current folder which are bigger than 10KB
display all the files in the entire file system which begin with "apache-tomcat"
display all the files in the file system which belong to the group lighttpd
display all the files in the folder "/Users/Me/Desktop" which have read permission to them
display all the files in the home folder which begin with "arrow"
display all the files in the home folder which have read permission to the user
display all the hidden files in the directory "/dir/to/search/"
display all the jpg files in the current folder which belong to the user nobody
Display all lines contiaining 'funcname' in system map file matching current kernel.
display all the log files in the folder /var/log, print0 is used to handle files with only spaces in their names or which have newlines in their names
display all mp3 files in the file system which have not been accessed in the last 24 hours
display all php,xml and phtml files in current folder
display all normal/regular files in current folder in sorted order
display all regular/normal files in the current folder which are accessed in the last 7*24 hours
display all normal/regular files in current folder which have readable permission
display all the text files from the current folder and skip searching in skipdir1 and skipdir2 folders
display all text files in the folder /tmp/1 excluding those which do not have spaces in their names
Displays calendar of a previous, current and next month for December of 2120 year.
display the count of number html files in the current folder
(Linux specific) Display current running kernel's compile-time config file.
Display file type information for all instances of "file" in the current PATH.
Display human-readable file type description of ascii.txt
display long listing of all the symbolic links in the current folder
Displays status of currently active network interfaces.
Download "https://s3.amazonaws.com/sampletest/sample.tar.gz", unzip it, and untar it replacing filenames with "old" to "new"
download a file "http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip" using cookies "oraclelicense=accept-securebackup-cookie"
download contents from  "http://url" using a proxy server
download contents from "http://www.example.com" using a proxy server
Dry run making directories in "/TARGET_FOLDER_ROOT/" for each ".mov" file in the current directory tree
Dump the character output of "echo 'hi'"
Enables shell option 'nullglob'.
Execute "cd ${REMOTE_PATH}; mkdir -p $i" on host "$SERVER" as user "$USER" and connect standard input to "/dev/null"
Execute "cd /some/directory/myprogram" in the background on target machine "user@target" and write standard output and standard error to foo.out and foo.err
Execute "ls -l" every 0.5 seconds
Execute all commands in "/path/to/commands-inc.sh" on server "remote" as user "user"
Execute Shell script with find comamnd
Extract any line in sorted file "A" that does not appear in "B", "C", or "D"
Extract protocol and host name from URL.
Extract, sort and print only group names from /etc/group.
File 'save_pid.txt' contains a process ID, instantly kill this process with SIGKILL signal.
Filters out all comments from the output of the command "crontab -u $user -l" ignoring errors
find .gif files in /var/www and below that were last changed between 90 and 180 days ago
Find a directory named 'project.images' in the entire filesystem and show it in long listing format
find all the ".c" files in the folder "/home/you" which have been accessed in the last 30*24 hours
find all the ".flac" files in the current folder and convert them to mp3 with 128k bit rate
find all '*.c' files under $HOME directory which context contains sprintf
Find all *.c files under and below the current directory that contain "hogehoge"
Find all *.ext regular files under /path and execute my_cool_script for each of them with the file path as argument
Find all *.mp3, *.aif*, *.m4p, *.wav, *.flac files under $musicdir directory
Find all *.page (case insensitive) files/directories under current directory and run ~/t.sh for each of them with the file path as argument, then sort the output
Find all *.pdf.marker files under ${INPUT_LOCATION} and move them to ${OUTPUT_LOCATION} also move any *.pdf files with the same name under current directory to ${OUTPUT_LOCATION}
Find all *.rb (regular) files under current directory and count their line numbers
Find all *.swp files/directories under current directory and print the list to a file named 'rm'
Find all *.txt, *.html files under /basedir that match the case insensitive pattern *company* in their names
Find all *.txt files that reside under and below /home/wsuNID/
Find all *.xml files under current directory
Find all *gz files under asia and emea directory and print their names and line counts to file_count.txt
Find all *text files/directories under current directory
Find all .less files in the current directory tree
Find all .sql files in the current directory recursively and apply script "scriptname" to them
Find all 1.txt, 2.txt and 3.txt files under current directory and change the permission to 444
Find all aliencoders.[0-9]+ files/directories under /home/jassi/ directory
Find all aliencoders.[0-9]+ files under /home/jassi/ directory
find all the backup files in the current folder and delete them after user confirmation
Find all catalina* files/directories under /path/to/search/in
find all the configuration files in /etc folder along with the last access & modification time
find all the configuration files in the file system
find all the cpp(C++ source files), java, header files in the current directory
find all the css files
Find all directories in the /data1/realtime directory tree that were last modified more than 5 minutes ago but less than 60 minutes ago
Find all directories in the current directory tree whose names do not contain '.' and move their contents to the current directory
find all the directories in the current folder and change to these directories and run a command
find all the directories in current folder and delete them
find all the directories in the current folder excluding search in the sub directories and create these directories in another path
Find all directories that have been accessed $FTIME days ago under current directory tree
find all directories that names are 'project.images' and display details
Find all directories under /home/username/public_html/sites/all/themes and set their permission to 750
Find all directories under /home/username/public_html/themes and set their permission to 750
Find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and other for those directories
find all the directories with the name "DIRNAME" in the current folder and force delete them
find all empty files
find all the empty files and folders in your system
Find all fglrx-libGL* files under and below debian/fglrx/
find all files & dircetiry in current directory which  have .tmp extension and delete them .
Find all files/directories containing the case insensitive string something' in their names under current directory tree
Find all files/directories in current directory and run the command 'command' on each of them invoking the command as few times as possible
Find all files and directories in the current directory tree with "linkin park" in their names and copy them to /Users/tommye/Desktop/LP
Find all files/directories matching the regex .*sql.*
Find all files/directories named 'foo' in the entire filesystem
Find all files/directories named 'foo.bar' in the entire filesystem
Find all files/directories named 'testfile.txt' under current directory tree
Find all files/directories that contain 'packet' (case insensitive) in their names excluding directories that are bigger than 1500 bytes in size
Find all files/directories that have read, write, execution permission for user and belong to the user 'my_user' under current directory tree
Find all files/directories under $dir directory
Find all files/directories under '/usr/share/doc' directory tree whose name start with 'README'
Find all files/directories under ./var/log directory
Find all files/directories under /path/to/dir and set directory permission to 0755 and file permission to 0644
find all files and directories under the current directory and display the filesize followed by the filename, using the stat command on FreeBSD/OSX
Find all files/directories under current directory in maximum 3 levels deep
Find all files/directories under current directory with null character as the delimiter and then replace the null characters with :
Find all files and directories under current directory without crossing over to other partitions
Find all files/directories which have been modified from the start of the day in directories/files taken from the glob pattern '/tmp/test/*'
Find all files/directories with '.tar.gz' extension under $DIR/tmp/daily/ directory tree, sort them numerically and show the last 3 of them
Find all files/directories with 'my key phrase' in their names under current directory
Finds all files having text "texthere" recursively in a current folder, and precedes found string with string number in file and file name.
Find all files in the `sourceDir' directory tree
Find all files in the /home/myuser directory recursively that are older than 7 days
Find all files in the current directory and its sub-directories that have been modified sometime in the last 24 hours.
find all the files in current directory of size greater than 10MB and less than 20 MB.
Find all files in the current directory recursively that were last modified more than 5 days ago
Find all files in current directory that were modified less than 1 day ago excluding hidden files  and archive them to /media/caca/extract/full$date.cpio
find all the files in the current directory which have been modified after a file
find all the files in the current folder and display them in the sorted order of their name
find all files in the current folder that are not modified in the last 10 minutes
find all the files in the current folder that have been accessed in today
find all files in the current folder which are bigger than 10bytes
find all the files in the current folder which have been modified in the 10 minutes ago
find all the files in current folder which end with a speicifc regular expression and display their count
find all the files in the current folder which have execute permission
find all the files in the directory which is pointed by $1 variable ending with the name held in the variable $2 or having the extension of value saved in the argument $2.
find all the files in the folder /opt which have been accessed exactly 20 days ago
find all the files in the home folder that are modified day before yesterday
Find all files in ~/clang+llvm-3.3/bin/ and print 'basename /file/path' for each file
Find all files matching the pattern "${pattern}" in their name and execute ${my_command} for each of them with the file path as argument
Find all files recursively which end in ".php"
Find all files residing in /home/dm/Video or below that were changed less than 7 days ago
find all the files that have been changed today
find all the files that have been modified exactly 2 days ago
Find all files that belongs to group Developer under /home directory
Find all files that belong to group root
Find all files under $1 not matching the regex '.*/\..*' and execute hashmove on each of them with the file path as its argument
Find all the files under /etc directory which are larger than 100k
Find all files under /somefolder matching the pattern expanded by $FILE_PATTERN in thier names
Find all files under and below the current working directory with the word California in the file
Find all files under current directory
Find all files under current directory and make them read-only for owner, read & writable by group and remove read-write-execute permission
Find all files under current directory and run /tmp/clever.sh for each of them with each file path as an argument
Find all files under current directory and set read-write permission for owner and group and no permission for other for those directories
Find all files under current directory, calculate their md5sum
Find all files under current directory excluding hidden files
Find all files under current directory matching the regex '.*\(\(error\|access\)\(_log\)?\|mod_jk\.log\)\.[0-9]+' in their paths
find all files under the current directory that end in "foo" and execute somecommand on each quoted filename
Find all files under current directory that match the case insensitive regex .\|./.git and replace (all occurrences) the text matching the case insensitive regex expanded by $1 with $upper2 in these files
Find all files under current directory that were modified more than 1 day ago
Find all files under the current directory whose filenames are not "file.txt", ignoring the case
Find all files under current directory with their timestamp and paths and print a sorted list
Find all files with '.db' extension (case insensitive) that belong to user 'exampleuser' and were modified exactly 7 days ago under '/home' directory tree
find all the files with the extension .xml and print them in a single line and check for the validity of a command by giving the file as input
find all foo.bar files in the entire file system
Find all hidden directories starting from the current directory
Find all lines matching "$USER" in "file" and number the output
Finds all the log* files in /myDir recursively that are more than 7 days older, skipping already created .bz2 archives and compresses them.
Find all Makefile's in the current directory tree and look for line 235 in each of them
find all raw images in the current folder and pass them one at a time to the xargs command and enable parallel processing of the files
find all regular file and create jw-htmlfiles.tar
find all the regular/normal files ending with ".mod" in a folder and send them as input to the remodup command
find all the normal/regular files in the current directory and search for the word mail and display the file names
Find all regular files in the current directory tree and print a command to move them to the current directory
Find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%Tc %p\n'
Find all regular files in the current directory tree that have been modified within the last 10 minutes
find all the regular/normal files in the current folder which have been accessed in the last 1440*24 hours and not modified in 1441*24 hours excluding those which are in the custom sub directory tree
find all the regular files in the current folder which start with a "some text"
find all normal/regular files in the folder "//path/to/source/Directory" and calculate the md5sum of them and save the output to  file Output.txt
Find all regular files named postgis-2.0.0 under your home directory
Find all regular files that start with stat
Find all regular files under $DIR/tmp/daily/, sort them in reverse numerical order and copy the first two files to $DIR/tmp/weekly/
Find all regular files under test directory
find all sqlite files in the current directory.
Find all SUID files .
Find all SUID set files under current directory and show a few lines of output from the beginning
find all the text files in current folder and force delete them
find all the text files in the current folder and do not  search in the sub directories
Find all top level directories under current directory that doesn't contain a file/directory named 'bin'
find all the video files in the folder /home/<user>
find all the zip files in the current folder and create a tar ball of these zip files
Find an inode and remove
Find and replace xxx with yyy in whole directory tree
Find directories that are directly under $workspace_ts directory (no-subdirectories) and were modified less than 30 days ago
Find directories that are directly under $workspace_ts directory (no-subdirectories) and were modified more than 30 days ago
Find directories with permissions 777 and change them to 755 recursively
Find disk used space of only the target directory
Find every JavaScript file in the wordpress directory tree
Find executable files
find the file "filename.txt" in the usr folder
Find files/directories named 'document' in the entire filesystem and in the directory tree '/usr' even if it's in a different partition without traversing to other devices/partitions
Find files/directories under /users/tom that matches both the pattern "*.pl" and  "*.pm"
Find files/directories under current directory that matches the regex '/path/to/something'  in their paths
find files in the /usr/src directory with pattern` *.c  that larger than 100 Kilobytes
Find files modified at least 5 days in the future
Find files on the system accessed during the last 24 hours but not within the last hour
Find files that are empty
Find files that are orphaned
Find files that don’t have 644 permissions
Find files with size more than 200557600B and which are more than 2 days old under  ${userdir}/${i}/incoming directory and remove them
Finds if 'subversion' package is installed in system.
Find links to file path/to/foo.txt
find md5sum of a string stored in $pass
Finds PIDs of ssh sessions of all logged in users.
Finds recursively all files not having extension .o in '/path/' that contain 'pattern', and prints matched strings with string number and file name.
Find regular files that are larger than 2GB
find the regular js files which path does not contains '*/test/*'  and name does not contains '*-min-*' or '*console*'
Find sqlite3 databases in the current directory tree, execute query 'SELECT * FROM table WHERE column1="value"' on all of them, and search the result for "value"
Find strings with 'Features' in /var/run/dmesg.boot' file
Find symbolic links in lpi104-6 and research/lpi104-6 to files whose pathnames end in "file1"
Find symlinks in the current directory tree
Find the top level directories that contain a 'bin' directory in it or in one of it's sub-directories and print a sorted list to file b
Find writable files in the current directory tree
Force create a symbolic link to "$f" in "~/my-existing-links/" with name the basename of "$f"
forcibly and verbosely create a symbolic link named "target" to file "source"
Format the filename and modification time of files starting with t as a table on OSX
Format space separated fields in "filename" as a table
From a script, output the name of the script itself, without containing directories.
Gets a job with defined number back to the foreground.
get all files in a current directory modified in the last day
get all the files that are exactly 30 days old
Get current host's IPv6 address.
Gets IP address of a primary network interface.
get the jenkins user access
Installs 'firefox' package.
Installs package group "Development Tools" answering 'yes' on all questions.
Installs package group "MYSQL Database Client", answering 'yes' on all questions.
Invoke a trusted X11 forwarding SSH connection with server "192.168.0.14" on port 222 as user "phil"
Invoke a trusted X11 forwarding SSH connection with the server $ssh_server as user $ssh_user
Just find directories and skip file names
Keep the last 4 ASCII characters (bytes) of a string.
Keep only the last two hyphen-separated sections of "abc-def-ghi-jkl"
Kill the processes of user `myuser' that have been working more than 7 days
list *.pdf files under the /home/user/Desktop directory.
List the abc.def files under the directories /ghi and /jkl which have commented entries and display those entries
list all the ".ksh" files in the current directory
Lists all directories in a current folder.
List all environment variables containing 'USER' in their name or value that would result in running a command with 'sudo env'.
List all files and directories (including hidden) in the current working directory in a long list format sorted by the oldest modification time
List all files/directories under current directory and redirect it to /tmp/files.txt
List all files/directories under current directory with 'FooBar' in their paths ensuring white space safety
List all files in the current directory tree that were last modified on the 3rd of March, 2010 or later
list all javascipts file expect files under proc folder
List all regular files in the current directory tree
list all regular files under the directory "$directory"
List all unique parent directories of .class files found under the current directory
List and see contents of all abc.def files under the directories /ghi and /jkl
List common files in directories "1" and "2"
List files and directories one level deep in the current directory tree
List only file names matching "*2012*" from "serveripaddress::pt/dir/files/" listening on port 111 and write to "output.txt"
list txt files older than 5 days or html files of any age, null separated
Locate all *.csv files under the current directory tree separating the file names with zeroes
Locate all *.csv regular files under the current directory tree
Locate files with user permissions rwx owned by my_user
Log into "ubuntu@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com" using identity file "~/path/mykeypair.pem"
login as user YOUR_USER
Login to "$HOST" and create file "$FILE_PATH" if it does not exist
Look for files whose names begin with letters a-j
Make directory "/tmp/googleTestMock"
Make directory "aaa/bbb"
Mathematically sum a column of numbers in "FileWithColumnOfNumbers.txt"
Mathematically sum all numbers in "file.txt"
Merge already sorted files "file*.txt" and split the result into files of at most 100000 lines each with a prefix "sorted_file"
Merge already sorted files in the current directory starting with "_tmp" and write the output to "data.tsv.sorted"
Mount "/path/to/device" on "/path/to/mount/location" as a loop back device
Mount "ext4" filesystem "/dev/xvdf1" on "/vol"
Mount "ntfs-3g" filesystem "/dev/mapper/myvolume" on "/media/volume"
Mount image "test" to loop device "/dev/loop0"
Move "file.txt" to docker container "$CONTAINER_ID" in path "/var/lib/docker/devicemapper/mnt/$CONTAINER_ID/rootfs/root/file.txt"
Move each of the directories in /path/to/folders/* to another directory whose name is constituted by appending .mbox to each directory name and create a directory named Messages in this directory then move all *.emlx files into this directory
Open a local SSH port on 1080 for application-level port forwarding
Open executable file for command "rails" in text editor "mate"
Output "testFile.txt.1" without the ".1" suffix.
Output all lines in 'file' comparing the first 12 characters and discarding any adjascent lines where these characters are duplicates.
Output all lines that have a common first colon-separated field in files 'selection2.txt' and 'selection1.txt' by displaying the common (first) field of each line, followed by the extra fields in both lines.
Output the base name of first argument to script or function, that is the part following the last slash.
Page interactively through the output of running 'command' - the arrow keys move the view around, the < and > keys go to the beginning/end of the output, the / key initiates a search, the Q key quits, etc.
Page through extended information about all PCI devices on system.
Parse XML file "example.xml" and extract and number all "key" tags from the "config" section
Pass a wildcard to scp by escaping it: copy all files with names starting with "files" in directory "/location" on host "server" to current directory on local machine, displaying debug info and preserving timestamps and permissions on copied files.
Pipe the output of ls into "read var" in its separate process
Prefix all files and directories in the current directory with "Unix_" if the files contain no whitespace or subdirectories
Preprocess C++ file 'omnitest.cpp' (resolve all preprocessor directives) and page interactively through the result.
Print "found" if "blah" contains the hex byte string "\xCA\xFE\xBA\xBE"
Print "test=hello world"
Print '-exec is an action so an implicit -print is not applied' for every file/directory found by the name 'file' under current directory tree
Print 'Empty dir' if $some_dir is empty, otherwise print 'Dir is NOT empty'
Print 'file' content, formatting output as 29-symbol wide column
Print a 2 byte decimal integer from "/dev/random"
Print a count of all unique entries in "ips.txt" with the most frequent results at the top
Print a line of 10 '#' characters
Print a list of all *.code files from the current directory tree
Prints a random line from file
Print a randomly sorted list of numbers from 1 to 10 to file "/tmp/lst" and outputs "-------" followed by the reverse list to the screen
Print a sorted list of all .jpg files in the current directory and below
prints absolute file paths for files in current directory
Print all files/directories under ... directory by terminating their paths with a null character
Print all files containing "word1" and "word2" in the current directory tree
Print all files that exceed 1000 blocks and were modified at least a month ago
Print all group names known to the system.
Print all unique strings in $1.tmp file.
Print an alert message containing the IP address and information of the user connecting via SSH
Print characters in variable "$a" that exist in variable "$b"
Print the contents of "n"
Print continuous lines of 100 random characters either "." or " "
Prints current month calendar, without highlighting of a current date.
Print current shell settings
Print the current working directory without a trailing newline
Print each line in "file1" whose first word does not exist as the first word of any line in "file2"
Print each logged in user's username and full name
Print file information of command "passwd"
Print file system disk space usage of the current directory's file system
Prints file.txt without the last N bytes
Print the first 20 of the most changed ".cs" files in git
Prints the first N bytes of file.txt
Print flow of random data, showing all non-printing characters
Print the full real path of "/dev/disk/by-uuid/$1" followed by "is not mounted"
Prints git log message with a custom time format string
Print the hexadecimal bytes and printable characters of "Hello world"
Print the last space separated word from "a b c d e"
Prints the length, line number, and contents of the longest line in myfile
Print lines in file 'filename' that do not match the regex 'pattern'
Print lines in the sorted contents of "a.txt" that are not in the sorted contents of "b.txt"
Print lines that only unique ones in 'set1' and 'set2' files
Print line, word and byte counts for each .php files in current directory tree and also show the total counts
Print the list of files and directories of the current directory including "."
Print the list of files in the current directory tree excluding those whose paths contain "exclude3" or "exclude4"
Print local SRV record of domain '_etcd-client._tcp.'
Prints long listing of the current directory, sorted from oldest to newest, with appended indicators.
Prints long listing of top ten most memory using processes in a system.
Print the most recently modified file
Print mount point of the file system containing $path.
prints the names of all files in the directory tree rooted in /usr/src whose name ends with ‘.c’ and that are larger than 100 Kilobytes.
Print the names of all files in or below the current directory, with all of the file permission bits S_ISUID, S_ISGID, and S_IWOTH set
Print name of the file system containing $path.
Print the newest *.txt file under current directory with timestamp and path
Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts
print number of jobs
Print only lines from 'file1.txt' that not present in 'file2.txt' and beginning with 'Q'
Print only the number of lines in file "$f"
Print package information the command "ldconfig" belongs to in rpm
Prints process tree of the current command process.
Prints process tree with command line arguments and process id numbers.
Print second field from semicolon-seprated line $string.
Print sed commands that would replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree
Print sorted list of all group names known to the system.
Print whether the unique contents of "set1" and "set2" differ
Print which files differ in "PATH1/" and "PATH2/" recursively excluding any files that match any pattern in "file1"
Process all files matching pattern 'file??' and residing in the xargstest/ directory tree with script `myscript.sh'
Prompt the user with a question "This is the question I want to ask?" and save "y" or "n" in variable "REPLY" in zsh
Read a line from standard input into variable "response" without backslash escapes using the prompt "About to delete all items from history that match \"$param\". Are you sure? [y/N] "
Read a line from standard input into the variable "yn" using the first argument as the prompt ("$1 ")
Read a line from standard input with prompt "Are you sure you wish to continue?"
Read a single character from standard input into variable "key" without backslash escapes and using the prompt "Press any key to continue..."
Read a single character from standard input into variable "key" without backslash escapes, with a timeout of 5 seconds, and with the prompt "Press any key in the next five seconds..."
Read a single line from standard input and save to variable "line"
Read all *.txt file paths under /foo into a Bash array ($files)
recall the second argument from a previous command by pressing alt-shift-y
Receive pattern to search for on the standard input and print only matching part of lines from file 'f.html'
Recursively add read and execute permissions to all files and folders in "directory"
Recursively bind "/sys" to "/var/snmp3/sys"
Recursively changes group ownership of everything within a current directory to 'repogroup'.
Recursively compress every file in the current directory tree and keep the original file
Recursively copy directory "/path/to/data/myappdata" to "user@host:/remote/path/to/data/myappdata"
Recursively copies everything under the 'current' folder to the '.hiddendir' folder.
Recursively copy newer files in "sourcedir/" to "user@dest.com:/dest/dir/" via ssh
Recursively finds all files with whole word "pattern" in a current folder, and precedes found string with its number in file.
Recursively move "./dir" to "user@host:/path" compressing data and displaying progress during transmission
Redirects time output to file.
remote copy all text files from one location to another
Remount "/" without writing in "/etc/mtab"
Remount "/dev/block/mtdblock3" on "/system" with read and write permission
Remount "/home/evgeny" with the "suid" flag set
Remount "/media/Working/" with a umask of 000
Remove "\n" from "test1\ntest2\ntest3" and search for "test1.*test3"
Remove the "^M" characters from all *.ext files under /home directory
Remove all *.swp files under current directory ensuring white space safety
Remove all *~ files under dir
Remove all .txt files with spaces in names in and below the current directory
remove all the core files from /usr folder which have not been accessed in the last 7*24 hours
Remove all files from the current directory tree whose names do not match regular expression "excluded files criteria"
Remove all files under current directory
Remove all files whose names begin with "no-such-thing" in the /home/peter directory tree
Remove all regular files from the current directory tree that were modified between August 10th and August 17th
Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree
Remove all spaces from standard input
Removes all top-level empty folders within the current folder.
Remove characters in columns 34 through 39 in the output of "finger"
Removes everything from current folder but '*ddl*' and '*docs*' files.
Rename "file.txt" in directories "v_1", "v_2", and "v_3" each to "v_1.txt", "v_2.txt", and "v_3.txt" respectively and print the conversion
Rename "file001abc.txt" to "abc1.txt"
Renames all *.html files in a current directory to *.txt files.
Rename all *.jpg files under current directory by appending parent directory name at the beginning of their names if the name doesn't already contain the parent directory name
Rename all regular files under current directory tree with inode number 31467125 to 'new_name.html'
rename all the text files  in the current folder to html files
Reports count of characters in the value of ${FOO_NO_WHITESPACE} variable as follows: "length(FOO_NO_WHITESPACE)==<counted number of characters>"
Report file system containing the current directory disk usage
Report file system containing path to /dir/inner_dir/ disk usage in kilobytes.
Reports time consumed by command 'sleep 1' to the file time.txt together, and saves command error output to sleep.stderr.
Reports time consumed by command 'sleep 1' to the file time.txt together with command error output.
Request that the master ssh connection "otherHosttunnel" exits
Return the depth of the current directory tree
return every file that does not have bar somewhere in its full pathname
reverse both words and lines in file
Reversibly sorts content of the '${TMP}/${SCRIPT_NAME}.name' file
Run "./configure" with a new environment variable CC set to the full path of the command 'cc'
Runs 'mpv' command for each *.mpv and *.flv file in a current folder.
Run 'otherscript.sh' script with all environment variables specified in the file 'xxxx'
run command "sh runProgram.sh" as user jetty
Run mycommand in /tmp without changing the current shell's working directory
Run the node expression "JSON.parse(process.argv[1]).foo" on the contents of "foobar.json"
same as above example with -exec , in this example with -OK it should ask for confirmation before executing the rm command . that is called user intractive command
Save the contents of "~/.bashrc" to the clipboard on OSX
Save the current time formatted according to the format string "%Y-%m-%d %H:%M:%S" to the variable 'CDATE'
Save the first three octets of the host name's IP address to variable "subnet"
Save full path of command "rm" to variable "RM"
Save full path of command "tr" to variable "TR"
Save the full path of command "~/f" to variable "foo"
Save the greater version number of "$1" and "$2" into variable "ver"
Save the list of files in the current directory tree whose names contain "2011" to /tmp/allfiles
Save the list of files modified within a fortnight ago to `deploy.txt' stripping the file names of any leading directories
Save long listing of all running processes in the 'log' file, and save number of process strings that contain 'cntps' in the 'cnt' variable.
Save the number of matching executables for "$cmd" in $PATH to variable "candidates"
Save number of strings with $expression pattern in 'foo.txt' to 'big_lines' variable.
Save the physical current working directory to variable "END_ABS"
Save the short system host name to variable "hostname"
Search "input.txt" for regex patterns only matching those listed in "ignore.txt", list the unique lines and prefix with the number of occurrences
Search the /Path directory tree for files matching pattern "file_name*"
Search the /Path directory tree for files whose pathnames match "/Path/bar*" or "/Path/foo*" and whose names match pattern "file_name*"
Search the /media/shared directory recursively for MP3 and OGG files
Search the /tmp/ directory recursively for files matching regular expression ".*file[0-9]+$"
Search /usr/local recursively for directories whose names end with a number 0-9
Search all .c files from the current directory tree for "keyword", ignoring the case
Search all files in the current directory tree for "SearchString", ignoring .html files and skipping .svn directories
Searches available packages by word 'zsh'.
Searches available packages with 'mysql' and 'client' in name.
Search the current directory and all of its sub-directory for any PDF files being careful to prevent the shell from expanding anything in '*.pdf'  before it'ss passed to find.
Search the current directory for files whose names start with "messages." ignoring SVN and CVS files
Search the current directory recursively for files containing "string"
Search the current directory recursively for MOV files
Search the current directory recursively for regular files last accessed less than 2 minutes ago
Search the current directory recursively for regular files last modified more than 2 days ago
Search the current directory tree for .aux files
Search the current directory tree for .rb files ignoring .vendor directories
Search the current directory tree for files and directories called "test"
Search the current directory tree for files containing "needle" in their names
Search the dir_data directory and all of its sub-directories for regular files and remove the execute permission for all while adding the write permission for the user.
Search directory /path/to/check/ for regular files
Search directory trees /usr/local/man and /opt/local/man for files whose names begin with 'my'
Search for "pattern" in "file" and join each line by a space
Search for 'Processed Files' in all dl-aster-full-20131102* (case insensitive) files under current directory and print only the 2nd field from the output with : (colon) as the delimiter
Search for 'foo' in all the java files under 'dir1', 'dir2' and 'dir3' directory tree and print only the names of the matched files
Search for 'js' in all files under current directory that match 'some string' in their names
Search for 'keyword' in all javascript files under current directory tree excluding all paths that includes the directory 'node_modules'
Search for 'sometext' in all the files with '.txt' extension under current directory tree and also print the filenames
Search for 'specific string' in all files matching the name pattern '“*.[txt|TXT]”' under current directory tree
Search for *pattern* in and below current directory
search for a word in all the fies in the current folder
search for all empty directories in the folder /home
search for all the files in the current folder and sort them in the order of their depth and display the file names
search for all the files in current folder which start with "file2015-0" and move them to frst 400 fiiles  to another folder
search for all the files in the current folder which have the word "-GHBAG-" and display the move command for replacing the word "GHBAG" in the file names to "stream-agg"
search for all the files in the entire file system which have either suid or sgid bit enabled and find of diff of these files with the file "files.secure".
search for all the files in the folder /data/images which have been modified after /tmp/start and before /tmp/end
search for all the files in the folder /data/images which have been modified after /tmp/start and before /tmp/end and save the output list to output.txt
search for all the mp3 files in the current folder and change the character encoding of them to  EUR-KR (Korean characters)
search for all png files in a folder and copy them to another folder
search for all Scala files under the current directory that contain the string null
Search for the case insensitive pattern 'PATTERN' in all files under current directory tree and display the matched files
search for the directory "mysql" in the entire file system
Search for file 'secret.keys' redirecting error messages to /dev/null
Search for files/directories with the case insensitive pattern anaconda.* in /var/log directory and create an archive (file.tar) of the last file found
Search for files greater than 20MB in the entire file system, display the path and file size and discard error reporting of the find command
search for files starting with memo and which belong to the user ann in the folder /work
Search for the regex '^ERROR' in all *.log files under current directory
search for the regular/normal file "Dateiname" in the entire file system
search for the word "methodNameHere" in all the python files in the folder "/mycool/project/" and display color on the matched lines in the output
search for the word "slrn" in all the files in the folder $HOME/html/andrews-corner
search  in root ( / ) directory downwards all files which  have exactly 2 links.
Search the regular files of the current directory tree for string "stuff"
search through only the /usr and /home directories for any file named Chapter1.txt
(GNU specific: top) Send e-mail to "your_email@domain.com" with subject "any subject" containing process statistics output by the GNU version of 'top'.
send GET request to "http://testsite/api/" with header "Authorization: Token wef4fwef54te4t5teerdfgghrtgdg53" and format as json
Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.
Send SIGTERM signal to all python processes running script "csp_build.py"
set alias "devn" for command "cat > /dev/null"
set alias "go" for command 'GOPATH=$(infer-gopath.sh) go'
set alias "my_command" for command "$oldalias --fail-if-command-contains=$bad_string"
set alias "prettify_json" for command "php -E '$o = json_decode($argn); print json_encode($o, JSON_PRETTY_PRINT);'"
set alias "pwd" for command "echo -n `pwd` | pbcopy"
set alias "unix" for command 'echo $(date +%s)'
Set IFS variable to empty before reading a line of standard input without backslash escape characters
Set permissions for directories in `foldername' and its subdirectories to 755
Set permissions of all directories under "/opt/lampp/htdocs" to 755
Set permissions of command "node" to 755
Set the timestamp of B to the same one as A
Set timestamp of B to the timestamp in stat format specified by variable "old_time"
Set variable 'path' to name of current directory (without the containing directories) converted to lowercase.
show all .cpp, .c, .h, .hpp files in the folder ~/src
show all the files in the folder /etc which have been modified in the last 24 hours
Show all variables whose name or value contains "PATH", sorted in reverse alphabetical order.
Show the epoch in default date/time format
Show global windows options.
Show the value of variable "list", discarding consecutive duplicates and adding number of occurrences at the beginning of each line.
Sort "some_data" by the first and second ";" delimited entries, outputing unique lines and stabilizing the sort
Sort and display the file name and creation month of top 11 files in the entire file system (Sort in the order of month )
Sort lines in "FILE" to standard output preserving only unique lines
Split "$SOURCE_FILE" into files of at most 100 lines each
Split "<file_name>" into files of at most 1024 KiB in size
Split "data.tsv" into files of at most 5000000 lines each with prefix "_tmp"
split compressed content of the file www into pieces per 1073741824 bytes named as "backup.tar.NNN"
Split standard input into files with at most 75 lines each
Strips last section from the path $pathname, and prints basename of the rest part.
Test if files named 'something' were found in YOUR_DIR
Uncompress file "dbdump.sql.gz" through standard input and pass to "mysql"
Unset the DISPLAY variable
Unzip "file.gz" to standard output and execute in bash with arguments "-n wordpress"
Unzip and merge all "small-*.gz" files into files of 2000000 lines
Ungzip and untar all files matching "www-backup.tar.*"
Use metaflac to extract the artist field from myfile.flac, and set the variable ARTIST to the value of that field.
Use the PHP interpreter to output an endless stream of "a" characters to "nohup.out" in the current directory, or in the home directory if that is not possible. The PHP process will not receive or respond to SIGHUP (signal 1) which are sent to it.
Verbosely compresses all files on fourth and fifth depth level keeping original files in place.
Verbosely compresses all files on sixth and seventh depth level keeping original files in place.
wait for a change in "target-directory" before returning
Write "127.0.0.1 ad.doubleclick.net" to the console and append to "/etc/hosts" as root
Write "\n/usr/local/boost_1_54_0/stage/lib" to standard output and append to "/etc/ld.so.conf"
Write output of "command" to standard output and append to "/path/to/logfile"